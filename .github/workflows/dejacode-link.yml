name: Scancode.io → DejaCode (Objects & Linking)

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: read

env:
  # Aus Secrets: DejaCode Basis-URL und API Token (ohne trailing slash)
  DEJACODE_BASE: ${{ secrets.DEJACODE_URL }}
  DEJACODE_TOKEN: ${{ secrets.DEJACODE_API_KEY }}

jobs:
  dejacode-objects:
    name: Create & Link DejaCode Objects
    runs-on: ubuntu-latest

    steps:
      - name: Install jq (JSON parsing)
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Prepare variables (repo/org/tag + URL-encoding via jq)
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          # Beispiel: github.repository=SecuraPoint/react-frontend, github.ref_name=v1.1.9
          REPO_FULL="${{ github.repository }}"
          ORG="${REPO_FULL%%/*}"
          REPO="${REPO_FULL##*/}"
          TAG="${{ github.ref_name }}"

          NAME="$REPO"
          VERSION="$TAG"

          DOWNLOAD_URL="https://github.com/${ORG}/${REPO}/archive/refs/tags/${TAG}.tar.gz"
          ENCODED_DL_URL="$(printf '%s' "$DOWNLOAD_URL" | jq -sRr @uri)"

          {
            echo "org=$ORG"
            echo "repo=$REPO"
            echo "tag=$TAG"
            echo "name=$NAME"
            echo "version=$VERSION"
            echo "download_url=$DOWNLOAD_URL"
            echo "encoded_download_url=$ENCODED_DL_URL"
          } >> "$GITHUB_OUTPUT"

      ##################################################################
      # 1) Add DejaCode Package + lookup api_url
      ##################################################################
      - name: Add Package by download_url
        id: add_pkg
        shell: bash
        env:
          DL: ${{ steps.prep.outputs.download_url }}
        run: |
          set -euo pipefail
          RESP="$(curl -sS --fail \
            -H "Authorization: Token $DEJACODE_TOKEN" \
            -F "download_url=${DL}" \
            -X POST "$DEJACODE_BASE/api/v2/packages/add/")" || {
              echo "ERROR: Package add failed"
              exit 1
            }
          echo "Add response:"; echo "$RESP" | jq -r .

      - name: Resolve Package api_url
        id: pkg_lookup
        shell: bash
        env:
          DLQ: ${{ steps.prep.outputs.encoded_download_url }}
        run: |
          set -euo pipefail
          URL="$DEJACODE_BASE/api/v2/packages/?download_url=$DLQ"
          RESP="$(curl -sS --fail -H "Authorization: Token $DEJACODE_TOKEN" "$URL")"
          COUNT="$(jq -r '.count' <<<"$RESP")"
          if [ "$COUNT" != "1" ]; then
            echo "ERROR: expected exactly 1 package, got $COUNT"
            echo "$RESP" | jq -r .
            exit 1
          fi
          API_URL="$(jq -r '.results[0].api_url' <<<"$RESP")"
          PKG_UUID="$(jq -r '.results[0].uuid' <<<"$RESP")"
          echo "package_api_url=$API_URL" >> "$GITHUB_OUTPUT"
          echo "package_uuid=$PKG_UUID" >> "$GITHUB_OUTPUT"
          echo "Resolved package: $API_URL (uuid=$PKG_UUID)"

      ##################################################################
      # 2) Create DejaCode Component (or reuse existing)
      ##################################################################
      - name: Create Component
        id: create_component
        shell: bash
        env:
          NAME: ${{ steps.prep.outputs.name }}
          VERSION: ${{ steps.prep.outputs.version }}
        run: |
          set -Eeuo pipefail
          BODY="$(jq -n --arg n "$NAME" --arg v "$VERSION" '{name:$n, version:$v}')"
          HTTP_CODE="$(curl -sS -o resp.json -w "%{http_code}" \
            -H "Authorization: Token $DEJACODE_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            -X POST "$DEJACODE_BASE/api/v2/components/")" || true
          if [ "$HTTP_CODE" = "201" ]; then
            cat resp.json | jq -r .
            COMP_UUID="$(jq -r '.uuid' resp.json)"
            COMP_API="$(jq -r '.api_url' resp.json)"
            echo "component_uuid=$COMP_UUID" >> "$GITHUB_OUTPUT"
            echo "component_api_url=$COMP_API" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "$HTTP_CODE" = "400" ]; then
            echo "Component likely exists. Searching…"
            Q_NAME="$(printf '%s' "$NAME" | jq -sRr @uri)"
            Q_VER="$(printf '%s' "$VERSION" | jq -sRr @uri)"
            Q_URL="$DEJACODE_BASE/api/v2/components/?name=$Q_NAME&version=$Q_VER"
            RESP="$(curl -sS --fail -H "Authorization: Token $DEJACODE_TOKEN" "$Q_URL")"
            COUNT="$(jq -r '.count' <<<"$RESP")"
            if [ "$COUNT" = "0" ]; then
              echo "ERROR: Component creation failed and no existing match found."
              cat resp.json | jq -r .
              exit 1
            fi
            COMP_UUID="$(jq -r '.results[0].uuid' <<<"$RESP")"
            COMP_API="$(jq -r '.results[0].api_url' <<<"$RESP")"
            echo "component_uuid=$COMP_UUID" >> "$GITHUB_OUTPUT"
            echo "component_api_url=$COMP_API" >> "$GITHUB_OUTPUT"
            echo "Reused existing component: $COMP_API"
            exit 0
          fi
          echo "ERROR: Unexpected HTTP code while creating component: $HTTP_CODE"
          cat resp.json || true
          exit 1

      ##################################################################
      # 3) Create DejaCode Product (or reuse existing)
      ##################################################################
      - name: Create Product
        id: create_product
        shell: bash
        env:
          NAME: ${{ steps.prep.outputs.name }}
          VERSION: ${{ steps.prep.outputs.version }}
        run: |
          set -Eeuo pipefail
          BODY="$(jq -n --arg n "$NAME" --arg v "$VERSION" '{name:$n, version:$v}')"
          HTTP_CODE="$(curl -sS -o resp.json -w "%{http_code}" \
            -H "Authorization: Token $DEJACODE_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            -X POST "$DEJACODE_BASE/api/v2/products/")" || true
          if [ "$HTTP_CODE" = "201" ]; then
            cat resp.json | jq -r .
            PROD_UUID="$(jq -r '.uuid' resp.json)"
            PROD_API="$(jq -r '.api_url' resp.json)"
            echo "product_uuid=$PROD_UUID" >> "$GITHUB_OUTPUT"
            echo "product_api_url=$PROD_API" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "$HTTP_CODE" = "400" ]; then
            echo "Product likely exists. Searching…"
            Q_NAME="$(printf '%s' "$NAME" | jq -sRr @uri)"
            Q_VER="$(printf '%s' "$VERSION" | jq -sRr @uri)"
            Q_URL="$DEJACODE_BASE/api/v2/products/?name=$Q_NAME&version=$Q_VER"
            RESP="$(curl -sS --fail -H "Authorization: Token $DEJACODE_TOKEN" "$Q_URL")"
            COUNT="$(jq -r '.count' <<<"$RESP")"
            if [ "$COUNT" = "0" ]; then
              echo "ERROR: Product creation failed and no existing match found."
              cat resp.json | jq -r .
              exit 1
            fi
            PROD_UUID="$(jq -r '.results[0].uuid' <<<"$RESP")"
            PROD_API="$(jq -r '.results[0].api_url' <<<"$RESP")"
            echo "product_uuid=$PROD_UUID" >> "$GITHUB_OUTPUT"
            echo "product_api_url=$PROD_API" >> "$GITHUB_OUTPUT"
            echo "Reused existing product: $PROD_API"
            exit 0
          fi
          echo "ERROR: Unexpected HTTP code while creating product: $HTTP_CODE"
          cat resp.json || true
          exit 1

      ##################################################################
      # 4) Patch Component with Package
      ##################################################################
      - name: Link Package to Component (PATCH component.packages)
        id: patch_component
        shell: bash
        env:
          COMP_API: ${{ steps.create_component.outputs.component_api_url }}
          PKG_API: ${{ steps.pkg_lookup.outputs.package_api_url }}
        run: |
          set -euo pipefail
          if [ -z "$COMP_API" ] || [ -z "$PKG_API" ]; then
            echo "ERROR: Missing component_api_url or package_api_url."
            exit 1
          fi
          BODY="$(jq -n --arg p "$PKG_API" '{packages: [$p]}')"
          curl -sS --fail \
            -H "Authorization: Token $DEJACODE_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            -X PATCH "$COMP_API" | jq -r .
          echo "Component successfully patched with package."

      ##################################################################
      # 5) Add Component to Product (via API-URLs)
      ##################################################################
      - name: Add Component to Product (product_components via api_url)
        id: add_component_by_api_url
        shell: bash
        env:
          COMP_API: ${{ steps.create_component.outputs.component_api_url }}
          PROD_API: ${{ steps.create_product.outputs.product_api_url }}
        run: |
          set -euo pipefail
          [ -n "$COMP_API" ] && [ -n "$PROD_API" ] || { echo "Missing API URLs"; exit 1; }

          BODY="$(jq -n --arg c "$COMP_API" --arg p "$PROD_API" '{component: $c, product: $p}')"
          HTTP_CODE="$(curl -sS -o resp.json -w "%{http_code}" \
            -H "Authorization: Token $DEJACODE_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            -X POST "$DEJACODE_BASE/api/v2/product_components/")" || true

          echo "HTTP_CODE=$HTTP_CODE"
          cat resp.json | jq -r . || true

          # 201 Created -> Verknüpfung erstellt
          # 400 Bad Request -> häufig "already exists" -> ok (idempotent)
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "400" ]; then
            echo "Linked component to product (status $HTTP_CODE)."
            exit 0
          fi

          echo "ERROR: Failed to link component to product."
          exit 1
